@page "/categories"

@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@inject ICategoryRepository CategoryRepository

<MudText Typo="Typo.h6">Kategorie</MudText>
<MudDataGrid Items="@_categories" @ref="_dataGrid" Culture="@(new CultureInfo("pl-PL"))">
    <ToolBarContent>
        <MudSpacer/>
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => EditCategory(new()))" Color="Color.Success" EndIcon="@Icons.Material.Filled.Category"></MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn TProperty="string" T="Category" Property="x => x.Name" Title="Nazwa" Sortable="true"/>
        <PropertyColumn TProperty="string" T="Category" Property="x => x.Description" Title="Opis" Sortable="true"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="context">
                 <MudIconButton Icon="@Icons.Material.Outlined.Visibility" OnClick="@(() => NavigateToCategory(context.Item))"/>
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditCategory(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Category" RowsPerPageString="Elementów na stronie" PageSizeOptions="Constants.PageSizeOptions"/>
    </PagerContent>
</MudDataGrid>

@code {

    private IEnumerable<Category> _categories = new List<Category>();
    private MudDataGrid<Category> _dataGrid = new();

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryRepository.GetAllAsync();
    }

    private async Task EditCategory(Category category)
    {
        var title = category.Id == 0 ? "Dodaj kategorię" : "Edytuj kategorię";
        var parameters = new DialogParameters { { "Category", category } };
       var dialog = await DialogService.ShowAsync<EditCategoryDialog>(title, parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
            _categories = await CategoryRepository.GetAllAsync();
    }

    private void NavigateToCategory(Category category)
    {
        NavigationManager.NavigateTo($"/categories/{category.Id}");
    }

}