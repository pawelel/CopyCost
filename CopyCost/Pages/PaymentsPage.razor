@page "/"

@inject IDialogService DialogService
@inject IPaymentRepository PaymentRepository

<MudText Typo="Typo.h6">Płatności</MudText>

<MudDataGrid Items="_payments" @ref="_dataGrid" Filterable="true" FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
    <ToolBarContent>
        <MudSpacer/>
        <MudButton Disabled="@_canCreate" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => EditPayment(new()))" Color="Color.Success" EndIcon="@Icons.Material.Filled.MonetizationOn"></MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn TProperty="DateTime?" Format="dd-MM-yyyy" T="Payment" Property="x => x.Date" Title="Data" Sortable="true"/>
        <PropertyColumn TProperty="int" T="Payment" Property="x => x.Amount" AggregateDefinition="_sumCharacters" Title=" Liczba" Sortable="true" />
        <PropertyColumn TProperty="decimal" T="Payment" Format="F2" Property="x => x.Per1000" Title="Cena za 1000 znaków" Sortable="true"/>
        <PropertyColumn TProperty="decimal" Format="F2" T="Payment" Property="x => x.Total" AggregateDefinition="_sumDefinition" Title="Razem" Sortable="true"/>
        <PropertyColumn TProperty="string" T="Payment" Property="x => x.Category.Name" Title="Kategoria" Sortable="true"/>
        <PropertyColumn TProperty="string" T="Payment" Property="x => x.Customer.Name" Title="Klient" Sortable="true"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Disabled="@_canCreate" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditPayment((Payment)context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Payment" RowsPerPageString="Elementów na stronie" PageSizeOptions="new[] { 25, 5, 10, 50, 100, 150, 300, 350 }"/>
    </PagerContent>
</MudDataGrid>


@code{

    private IEnumerable<Payment> _payments = new List<Payment>();
    private bool _canCreate;
    private MudDataGrid<Payment> _dataGrid = new();

    protected override async Task OnInitializedAsync()
    {
        _payments = await PaymentRepository.GetAllAsync();
        _canCreate = !await PaymentRepository.AnyCategoryCustomerExist();
    }

    private async Task EditPayment(Payment payment)
    {
        var title = payment.Id == 0 ? "Dodaj płatność" : "Edytuj płatność";
        var parameters = new DialogParameters { { "Payment", payment } };
        var dialog = await DialogService.ShowAsync<EditPaymentDialog>(title, parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
            _payments = await PaymentRepository.GetAllAsync();
    }


   private readonly AggregateDefinition<Payment> _sumDefinition = new()
    {
   Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var sum = x.Sum(p => p.Total);
            var roundedSum = Math.Round((decimal)sum, 2);
            return $"Razem: {roundedSum.ToString("F2")} zł";
        }
    };

    private readonly AggregateDefinition<Payment> _sumCharacters = new()
        {
            Type = AggregateType.Custom,
            CustomAggregate = x =>
            {
                var sum = x.Sum(p => p.Amount);
                return $"Razem: {sum} znaków";
            }
        };

}