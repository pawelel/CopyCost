@page "/customers/{customerId:int}"
@inject ICustomerRepository CustomerRepository
@inject ICategoryRepository CategoriesRepository

<MudText Typo="Typo.h6">Szczegóły klienta</MudText>
@if (_customer is not null)
{
    <MudDataGrid Items="@_categorySummaries" Filterable="true" Sortable="true">
        <ToolBarContent>
            <MudText Typo="Typo.body1">Nazwa:</MudText>
            <MudText Class="px-2" Typo="Typo.body2">@_customer.Name</MudText>
            <MudText Typo="Typo.body1">Opis:</MudText>
            <MudText Class="px-2" Typo="Typo.body2">@_customer.Description</MudText>
        </ToolBarContent>
        <Columns>
            <PropertyColumn T="CategoryByText" TProperty="DateTime" Format="MMMM yyyy" Property="x => x.MonthYear" Title="Miesiąc" Sortable="true" Filterable="true"/>
            <PropertyColumn T="CategoryByText" TProperty="string" Title="Kategoria" Sortable="true" Filterable="true" Property="x => x.Category"/>
            <PropertyColumn T="CategoryByText" TProperty="int" Title="Liczba tekstów" Sortable="true" Filterable="true" Property="x => x.TextCount"/>
            <PropertyColumn T="CategoryByText" TProperty="int" Title="Liczba znaków" AggregateDefinition="_sumCharacters"  Sortable="true" Filterable="true" Property="x => x.TotalCharacters"/>
            <PropertyColumn T="CategoryByText" TProperty="decimal" Title="Suma" Format="C" Sortable="true" AggregateDefinition="_sumDefinition" Filterable="true" Property="x => x.Total"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CategoryByText" RowsPerPageString="Elementów na stronie" PageSizeOptions="new[] { 5, 10, 25, 50, 100 }"/>
        </PagerContent>
    </MudDataGrid>
}
else
{
    <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true">
        <MudText Typo="Typo.h6">Nie znaleziono klienta</MudText>
    </MudPaper>
}


@code {

    [Parameter]
    public int CustomerId { get; set; }

    private List<CategoryByText>? _categorySummaries;
    private Customer? _customer = new();
    protected override async Task OnInitializedAsync()
    {
        _customer = await CustomerRepository.GetAsync(CustomerId);
        _categorySummaries = await CategoriesRepository.GetCategoriesByTextAsync(CustomerId);
    }
    private readonly AggregateDefinition<CategoryByText> _sumDefinition = new()
    {
        Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var sum = x.Sum(p => p.Total);
            var roundedSum = Math.Round((decimal)sum, 2);
            return $"Razem: {roundedSum.ToString("F2")} zł";
        }
    };

    private readonly AggregateDefinition<CategoryByText> _sumCharacters = new()
    {
        Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var sum = x.Sum(p => p.TotalCharacters);
            return $"Razem: {sum} znaków";
        }
    };
}